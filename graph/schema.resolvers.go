package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"Construction-API/graph/model"
	"Construction-API/graph/utils"
	"context"
	"errors"
	"strconv"

	"gorm.io/gorm"
)

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.TaskInput, token string) (*model.Task, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}
	if perm != utils.Administrator {
		return nil, errors.New("permission denied")
	}

	ok, err := utils.CheckTask(input, r.DB)
	if !ok {
		return nil, err
	}

	data := utils.ToTaskData(input, r.DB)
	err = r.DB.Create(&data).Error

	if err != nil {
		return nil, err
	}

	task, err := utils.ToTask(data, r.DB)
	if err != nil {
		return nil, err
	}

	return &task, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, id int, input model.TaskInput, token string) (*model.Task, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}
	if perm != utils.Administrator {
		return nil, errors.New("permission denied")
	}

	ok, err := utils.CheckTask(input, r.DB)
	if !ok {
		return nil, err
	}

	data := utils.ToTaskData(input, r.DB)
	data.ID = id

	err = r.DB.Save(&data).Error

	if err != nil {
		return nil, err
	}

	task, err := utils.ToTask(data, r.DB)
	if err != nil {
		return nil, err
	}

	task.ID = id
	return &task, nil
}

// DeleteTask is the resolver for the deleteTask field.
func (r *mutationResolver) DeleteTask(ctx context.Context, id int, token string) (bool, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return false, err
	}
	if perm != utils.Administrator {
		return false, errors.New("permission denied")
	}

	err = r.DB.Where("id = ?", id).Delete(&model.TaskData{}).Error

	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, name string, token string) (*model.Project, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}
	if perm != utils.Administrator {
		return nil, errors.New("permission denied")
	}

	project := model.Project{
		Name: name,
	}

	err = r.DB.Create(&project).Error

	if err != nil {
		return nil, err
	}

	return &project, nil
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id int, name string, token string) (*model.Project, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}
	if perm != utils.Administrator {
		return nil, errors.New("permission denied")
	}

	project := model.Project{
		ID:   id,
		Name: name,
	}

	err = r.DB.Save(&project).Error

	if err != nil {
		return nil, err
	}

	return &project, nil
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id int, token string) (bool, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return false, err
	}
	if perm != utils.Administrator {
		return false, errors.New("permission denied")
	}

	err = r.DB.Where("id = ?", id).Delete(&model.Project{}).Error

	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateLocation is the resolver for the createLocation field.
func (r *mutationResolver) CreateLocation(ctx context.Context, name string, token string) (*model.Location, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}
	if perm != utils.Administrator {
		return nil, errors.New("permission denied")
	}

	location := model.Location{
		Name: name,
	}

	err = r.DB.Create(&location).Error

	if err != nil {
		return nil, err
	}

	return &location, nil
}

// UpdateLocation is the resolver for the updateLocation field.
func (r *mutationResolver) UpdateLocation(ctx context.Context, id int, name string, token string) (*model.Location, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}
	if perm != utils.Administrator {
		return nil, errors.New("permission denied")
	}

	location := model.Location{
		ID:   id,
		Name: name,
	}

	err = r.DB.Save(&location).Error

	if err != nil {
		return nil, err
	}

	return &location, nil
}

// DeleteLocation is the resolver for the deleteLocation field.
func (r *mutationResolver) DeleteLocation(ctx context.Context, id int, token string) (bool, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return false, err
	}
	if perm != utils.Administrator {
		return false, errors.New("permission denied")
	}

	err = r.DB.Where("id = ?", id).Delete(&model.Location{}).Error

	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateStaff is the resolver for the createStaff field.
func (r *mutationResolver) CreateStaff(ctx context.Context, input model.StaffInput) (*model.Staff, error) {
	ok, err := utils.CheckUserPass(input.Name, input.Password, false, r.DB)
	if !ok {
		if err != nil {
			return nil, err
		}
		return nil, errors.New("this user already exists")
	}

	department := utils.ToDepartment(input.DepartmentID, r.DB)
	if department == nil {
		return nil, errors.New("Department not found")
	}

	token, err := utils.GenerateToken(input.Name)
	if err != nil {
		return nil, err
	}

	data := model.StaffData{
		Name:         input.Name,
		DepartmentID: input.DepartmentID,
		Role:         "Staff",
		Password:     input.Password,
		Token:        token,
	}

	err = r.DB.Create(&data).Error

	if err != nil {
		return nil, err
	}

	staff := model.Staff{
		ID:         data.ID,
		Name:       input.Name,
		Department: department,
		Role:       "Staff",
		Password:   input.Password,
		Token:      token,
	}
	return &staff, nil
}

// UpdateStaff is the resolver for the updateStaff field.
func (r *mutationResolver) UpdateStaff(ctx context.Context, id int, input model.StaffInput, token string) (*model.Staff, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}

	var staffId string
	err = r.DB.Model(&model.StaffData{}).Select("id").Where("token = ?", token).Scan(&staffId).Error
	if err != nil {
		return nil, err
	}

	if perm != utils.Administrator && staffId != strconv.Itoa(id) {
		return nil, errors.New("permission denied")

	}

	department := utils.ToDepartment(input.DepartmentID, r.DB)
	if department == nil {
		return nil, errors.New("Department not found")
	}

	var staffToken string
	err = r.DB.Model(&model.StaffData{}).Select("token").Where("id = ?", id).Scan(&staffToken).Error
	if err != nil {
		return nil, err
	}

	if perm != utils.Administrator {
		input.Role = "Staff"
	}

	data := model.StaffData{
		ID:           id,
		Name:         input.Name,
		DepartmentID: input.DepartmentID,
		Role:         input.Role,
		Password:     input.Password,
		Token:        staffToken,
	}
	err = r.DB.Save(&data).Error

	if err != nil {
		return nil, err
	}

	staff := model.Staff{
		ID:         id,
		Name:       input.Name,
		Department: department,
		Role:       input.Role,
		Password:   input.Password,
		Token:      staffToken,
	}
	return &staff, nil
}

// DeleteStaff is the resolver for the deleteStaff field.
func (r *mutationResolver) DeleteStaff(ctx context.Context, id int, token string) (bool, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return false, err
	}
	if perm != utils.Administrator {
		return false, errors.New("permission denied")
	}

	err = r.DB.Where("id = ?", id).Delete(&model.StaffData{}).Error

	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateDepartment is the resolver for the createDepartment field.
func (r *mutationResolver) CreateDepartment(ctx context.Context, name string, token string) (*model.Department, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}
	if perm != utils.Administrator {
		return nil, errors.New("permission denied")
	}

	department := model.Department{
		Name: name,
	}

	err = r.DB.Create(&department).Error

	if err != nil {
		return nil, err
	}

	return &department, nil
}

// UpdateDepartment is the resolver for the updateDepartment field.
func (r *mutationResolver) UpdateDepartment(ctx context.Context, id int, name string, token string) (*model.Department, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}
	if perm != utils.Administrator {
		return nil, errors.New("permission denied")
	}

	department := model.Department{
		ID:   id,
		Name: name,
	}

	err = r.DB.Save(&department).Error

	if err != nil {
		return nil, err
	}

	return &department, nil
}

// DeleteDepartment is the resolver for the deleteDepartment field.
func (r *mutationResolver) DeleteDepartment(ctx context.Context, id int, token string) (bool, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return false, err
	}
	if perm != utils.Administrator {
		return false, errors.New("permission denied")
	}

	err = r.DB.Where("id = ?", id).Delete(&model.Department{}).Error
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateRoom is the resolver for the createRoom field.
func (r *mutationResolver) CreateRoom(ctx context.Context, input model.RoomInput, token string) (*model.Room, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}

	if perm != utils.Administrator {
		return nil, errors.New("permission denied")
	}

	if input.ParticipantIDs == nil || input.Name == "" {
		return nil, errors.New("invalid input")
	}

	participants, err := utils.MapStaffFromInput(input.ParticipantIDs, r.DB)
	if err == gorm.ErrRecordNotFound {
		return nil, errors.New("invalid input")
	}
	if err != nil {
		return nil, err
	}

	roomData := model.RoomData{
		Name:           input.Name,
		ParticipantIDs: utils.SliceToArray(input.ParticipantIDs),
	}

	err = r.DB.Create(&roomData).Error
	if err != nil {
		return nil, err
	}

	room := model.Room{
		ID:           roomData.ID,
		Name:         input.Name,
		Participants: participants,
	}

	return &room, nil
}

// UpdateRoom is the resolver for the updateRoom field.
func (r *mutationResolver) UpdateRoom(ctx context.Context, id int, input model.RoomInput, token string) (*model.Room, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}

	if perm != utils.Administrator {
		return nil, errors.New("permission denied")
	}

	if input.ParticipantIDs == nil || input.Name == "" {
		return nil, errors.New("invalid input")
	}

	participants, err := utils.MapStaffFromInput(input.ParticipantIDs, r.DB)
	if err == gorm.ErrRecordNotFound {
		return nil, errors.New("invalid input")
	}
	if err != nil {
		return nil, err
	}

	roomData := model.RoomData{
		ID:             id,
		Name:           input.Name,
		ParticipantIDs: utils.SliceToArray(input.ParticipantIDs),
	}

	err = r.DB.Save(&roomData).Error
	if err != nil {
		return nil, err
	}

	room := model.Room{
		ID:           roomData.ID,
		Name:         input.Name,
		Participants: participants,
	}

	return &room, nil
}

// DeleteRoom is the resolver for the deleteRoom field.
func (r *mutationResolver) DeleteRoom(ctx context.Context, id int, token string) (bool, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return false, err
	}
	if perm != utils.Administrator {
		return false, errors.New("permission denied")
	}

	err = r.DB.Where("id = ?", id).Delete(&model.RoomData{}).Error
	if err != nil {
		return false, err
	}

	err = r.DB.Where("room_id = ?", id).Delete(&model.MessageData{}).Error
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, input model.MessageInput, token string) (*model.Message, error) {
	message, messageData, err := utils.InputToMessageAndMessageData(input, token, r.DB)
	if err != nil {
		return nil, err
	}

	err = r.DB.Create(&messageData).Error
	if err != nil {
		return nil, err
	}

	message.ID = messageData.ID

	r.SubsMutex.Lock()
	defer r.SubsMutex.Unlock()

	if messageChan, ok := r.Subs[message.Sender.ID]; ok {
		messageChan <- message
	}

	return message, nil
}

// UpdateMessage is the resolver for the updateMessage field.
func (r *mutationResolver) UpdateMessage(ctx context.Context, id int, content string, token string) (*model.Message, error) {
	var userID int
	err := r.DB.Model(&model.StaffData{}).Select("id").Where("token = ?", token).First(&userID).Error
	if err != nil {
		return nil, err
	}

	var senderID int
	err = r.DB.Model(&model.MessageData{}).Select("sender_id").Where("id = ?", id).First(&senderID).Error
	if err != nil {
		return nil, err
	}

	if userID != senderID {
		return nil, errors.New("permission denied")
	}

	if content == "" {
		return nil, errors.New("invalid input")
	}

	var previousContent string
	err = r.DB.Model(&model.MessageData{}).Select("content").Where("id = ?", id).First(&previousContent).Error
	if err != nil {
		return nil, err
	}

	if previousContent == content {
		return nil, errors.New("invalid input")
	}
	err = r.DB.Model(&model.MessageData{}).Where("id = ?", id).Update("content", content).Error
	if err != nil {
		return nil, err
	}

	message, err := utils.ToMessage(id, r.DB)
	if err != nil {
		return nil, err
	}

	return message, nil
}

// DeleteMessage is the resolver for the deleteMessage field.
func (r *mutationResolver) DeleteMessage(ctx context.Context, id int, token string) (bool, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return false, err
	}

	if perm == utils.Administrator {
		err = r.DB.Where("id = ?", id).Delete(&model.Department{}).Error
	} else {
		var userID int
		err = r.DB.Model(&model.StaffData{}).Select("id").Where("token = ?", token).First(&userID).Error
		if err != nil {
			return false, err
		}

		var senderID int
		err = r.DB.Model(&model.MessageData{}).Select("sender_id").Where("id = ?", id).First(&senderID).Error
		if err != nil {
			return false, err
		}

		if userID != senderID {
			return false, errors.New("permission denied")
		}

		err = r.DB.Where("id = ?", id).Delete(&model.MessageData{}).Error
	}

	if err != nil {
		return false, err
	}

	return true, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context, token string) ([]*model.Task, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}
	var data []*model.TaskData

	if perm == utils.Administrator {
		err = r.DB.Set("gorm:auto_preload", true).Find(&data).Error
	} else {
		var staff *model.StaffData
		err = r.DB.Set("gorm:auto_preload", true).Where("token = ?", token).First(&staff).Error
		if err != nil {
			return nil, err
		}

		err = r.DB.Set("gorm:auto_preload", true).
			Where(gorm.Expr("? = ANY(staff_ids) OR (department_id = ? AND -1 = ALL(staff_ids))", staff.ID, staff.DepartmentID)).
			Find(&data).Error
	}

	if err != nil {
		return nil, err
	}

	var tasks []*model.Task
	for _, taskData := range data {
		task, err := utils.ToTask(*taskData, r.DB)
		if err != nil {
			return nil, err
		}
		tasks = append(tasks, &task)
	}

	return tasks, nil
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id int, token string) (*model.Task, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}

	var data *model.TaskData

	if perm == utils.Administrator {
		err = r.DB.Set("gorm:auto_preload", true).Where("id = ?", id).First(&data).Error
	} else {
		var staff *model.StaffData
		err = r.DB.Set("gorm:auto_preload", true).Where("token = ?", token).First(&staff).Error
		if err != nil {
			return nil, err
		}

		err = r.DB.Set("gorm:auto_preload", true).
			Where("id = ?", id).
			Where(gorm.Expr("? = ANY(staff_ids) OR (department_id = ? AND -1 = ALL(staff_ids))", staff.ID, staff.DepartmentID)).
			First(&data).Error
	}

	if err != nil {
		return nil, err
	}

	task, err := utils.ToTask(*data, r.DB)
	if err != nil {
		return nil, err
	}

	return &task, nil
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) ([]*model.Project, error) {
	var projects []*model.Project
	err := r.DB.Set("gorm:auto_preload", true).Find(&projects).Error

	if err != nil {
		return nil, err
	}

	return projects, nil
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id int) (*model.Project, error) {
	var project *model.Project
	err := r.DB.Set("gorm:auto_preload", true).Where("id = ?", id).First(&project).Error

	if err != nil {
		return nil, err
	}

	return project, nil
}

// Locations is the resolver for the locations field.
func (r *queryResolver) Locations(ctx context.Context) ([]*model.Location, error) {
	var locations []*model.Location
	err := r.DB.Set("gorm:auto_preload", true).Find(&locations).Error

	if err != nil {
		return nil, err
	}

	return locations, nil
}

// Location is the resolver for the location field.
func (r *queryResolver) Location(ctx context.Context, id int) (*model.Location, error) {
	var location *model.Location
	err := r.DB.Set("gorm:auto_preload", true).Where("id = ?", id).First(&location).Error

	if err != nil {
		return nil, err
	}

	return location, nil
}

// Staff is the resolver for the staff field.
func (r *queryResolver) Staff(ctx context.Context, token string) ([]*model.Staff, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}

	var data []*model.StaffData

	if perm == utils.Administrator {
		err = r.DB.Set("gorm:auto_preload", true).Find(&data).Error
	} else {
		err = r.DB.Set("gorm:auto_preload", true).Where("token = ?", token).Find(&data).Error
	}

	if err != nil {
		return nil, err
	}

	var staff []*model.Staff
	for _, staffMemberData := range data {
		var department *model.Department
		err = r.DB.Set("gorm:auto_preload", true).Where("id = ?", staffMemberData.DepartmentID).First(&department).Error

		if err != nil {
			return nil, err
		}
		staffMember := model.Staff{
			ID:         staffMemberData.ID,
			Name:       staffMemberData.Name,
			Department: department,
			Role:       staffMemberData.Role,
			Password:   staffMemberData.Password,
			Token:      staffMemberData.Token,
		}
		staff = append(staff, &staffMember)
	}

	return staff, nil
}

// StaffMember is the resolver for the staffMember field.
func (r *queryResolver) StaffMember(ctx context.Context, id int, token string) (*model.Staff, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}

	var data *model.StaffData

	if perm == utils.Administrator {
		err = r.DB.Set("gorm:auto_preload", true).Where("id = ?", id).First(&data).Error
	} else {
		var staffID int
		err = r.DB.Set("gorm:auto_preload", true).Model(&model.StaffData{}).Select("id").Where("token = ?", token).Scan(&staffID).Error
		if err != nil {
			return nil, err
		}

		if staffID != id {
			return nil, errors.New("permission denied")
		}

		err = r.DB.Set("gorm:auto_preload", true).Where("token = ?", token).Where("id = ?", id).First(&data).Error
	}

	if err != nil {
		return nil, err
	}

	var department *model.Department
	err = r.DB.Set("gorm:auto_preload", true).Where("id = ?", data.DepartmentID).First(&department).Error

	if err != nil {
		return nil, err
	}

	staffMember := model.Staff{
		ID:         data.ID,
		Name:       data.Name,
		Department: department,
		Role:       data.Role,
		Password:   data.Password,
		Token:      data.Token,
	}

	return &staffMember, nil
}

// Departments is the resolver for the departments field.
func (r *queryResolver) Departments(ctx context.Context) ([]*model.Department, error) {
	var departments []*model.Department
	err := r.DB.Set("gorm:auto_preload", true).Find(&departments).Error

	if err != nil {
		return nil, err
	}

	return departments, nil
}

// Department is the resolver for the department field.
func (r *queryResolver) Department(ctx context.Context, id int) (*model.Department, error) {
	var department *model.Department
	err := r.DB.Set("gorm:auto_preload", true).Where("id = ?", id).First(&department).Error

	if err != nil {
		return nil, err
	}

	return department, nil
}

// Rooms is the resolver for the rooms field.
func (r *queryResolver) Rooms(ctx context.Context, token string) ([]*model.Room, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}

	var rooms []*model.Room
	if perm == utils.Administrator {
		var roomsData []*model.RoomData
		err = r.DB.Set("gorm:auto_preload", true).Find(&roomsData).Error
		if err != nil {
			return nil, err
		}

		var IDs []int
		err = r.DB.Set("gorm:auto_preload", true).Model(&model.RoomData{}).Select("id").Find(&IDs).Error
		if err != nil {
			return nil, err
		}

		for _, id := range IDs {
			room, err := utils.ToRoom(id, r.DB)
			if err != nil {
				return nil, err
			}
			rooms = append(rooms, room)
		}

	} else {
		var userID int
		err = r.DB.Model(&model.StaffData{}).Select("id").Where("token = ?", token).First(&userID).Error
		if err != nil {
			return nil, err
		}

		var IDs []int
		err = r.DB.Set("gorm:auto_preload", true).Model(&model.RoomData{}).Select("id").Find(&IDs).Error
		if err != nil {
			return nil, err
		}

		for _, id := range IDs {
			room, err := utils.ToRoomByUser(id, userID, r.DB)
			if err == nil {
				rooms = append(rooms, room)
			} else if err.Error() != "permission denied" {
				return nil, err
			}
		}
	}
	return rooms, nil
}

// Room is the resolver for the room field.
func (r *queryResolver) Room(ctx context.Context, id int, token string) (*model.Room, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}

	if perm == utils.Administrator {
		room, err := utils.ToRoom(id, r.DB)
		if err != nil {
			return nil, err
		}
		return room, nil
	} else {
		var userID int
		err = r.DB.Model(&model.StaffData{}).Select("id").Where("token = ?", token).First(&userID).Error
		if err != nil {
			return nil, err
		}

		room, err := utils.ToRoomByUser(id, userID, r.DB)
		if err != nil {
			return nil, err
		}

		return room, nil
	}
}

// Messages is the resolver for the messages field.
func (r *queryResolver) Messages(ctx context.Context, token string, roomID int) ([]*model.Message, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}

	if perm == utils.Administrator {
		var messageIDs []int
		err = r.DB.Model(&model.MessageData{}).Where("room_id = ?", roomID).Select("id").Find(&messageIDs).Error
		if err != nil {
			return nil, err
		}

		var messages []*model.Message
		for _, id := range messageIDs {
			message, err := utils.ToMessage(id, r.DB)
			if err != nil {
				return nil, err
			}
			messages = append(messages, message)
		}
		return messages, nil
	} else {
		var userID int
		err = r.DB.Model(&model.StaffData{}).Select("id").Where("token = ?", token).First(&userID).Error
		if err != nil {
			return nil, err
		}

		_, err = utils.ToRoomByUser(roomID, userID, r.DB)
		if err != nil {
			return nil, err
		}

		var messageIDs []int
		err = r.DB.Model(&model.MessageData{}).Where("room_id = ?", roomID).Select("id").Find(&messageIDs).Error
		if err != nil {
			return nil, err
		}

		var messages []*model.Message
		for _, id := range messageIDs {
			message, err := utils.ToMessage(id, r.DB)
			if err != nil {
				return nil, err
			}
			messages = append(messages, message)
		}
		return messages, nil
	}
}

// Message is the resolver for the message field.
func (r *queryResolver) Message(ctx context.Context, id int, token string) (*model.Message, error) {
	perm, err := utils.GetPermission(token, r.DB)
	if err != nil {
		return nil, err
	}

	if perm == utils.Administrator {
		message, err := utils.ToMessage(id, r.DB)
		if err != nil {
			return nil, err
		}
		return message, nil
	} else {
		var userID int
		err = r.DB.Model(&model.StaffData{}).Select("id").Where("token = ?", token).First(&userID).Error
		if err != nil {
			return nil, err
		}

		message, err := utils.ToMessage(id, r.DB)
		if err != nil {
			return nil, err
		}

		_, err = utils.ToRoomByUser(message.Room.ID, userID, r.DB)
		if err != nil {
			return nil, err
		}
		r.Subscription().MessageAdded(ctx, token, message.Room.ID)
		return message, nil
	}
}

// Login is the resolver for the login field.
func (r *queryResolver) Login(ctx context.Context, name string, password string) (*model.Login, error) {
	var staff *model.StaffData
	err := r.DB.Set("gorm:auto_preload", true).Where("name = ?", name).First(&staff).Error

	if err == gorm.ErrRecordNotFound {
		return nil, errors.New("user not found")
	}

	if err != nil {
		return nil, err
	}

	if staff.Password != password {
		return nil, errors.New("wrong password")
	}

	return &model.Login{
		UserID: staff.ID,
		Token:  staff.Token,
	}, nil
}

// MessageAdded is the resolver for the messageAdded field.
func (r *subscriptionResolver) MessageAdded(ctx context.Context, token string, roomID int) (<-chan *model.Message, error) {
	r.SubsMutex.Lock()
	defer r.SubsMutex.Unlock()

	user, err := utils.TokenToUser(token, r.DB)
	if err != nil {
		return nil, err
	}

	_, err = utils.ToRoomByUser(roomID, user.ID, r.DB)
	if err != nil {
		return nil, err
	}

	messageChan := r.Subs[roomID]
	if messageChan == nil {
		messageChan = make(chan *model.Message)
		r.Subs[roomID] = messageChan
		go func() {
			<-ctx.Done()
			r.SubsMutex.Lock()
			delete(r.Subs, roomID)
			close(messageChan)
			r.SubsMutex.Unlock()
		}()
	}
	return messageChan, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

func NewResolver(db *gorm.DB) *Resolver {
	return &Resolver{
		DB:   db,
		Subs: make(map[int]chan *model.Message),
	}
}
